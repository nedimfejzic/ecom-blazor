@page "/cart"
@inject ICartService _cartService
@inject IOrderService _orderService
@inject IAuthService _authService

<PageTitle>Shoping cart</PageTitle>
<h3>Cart</h3>


@if (cartProducts == null || cartProducts.Count == 0)
{
    <h2>@message</h2>
}else if (orderCompleted)
{
    <span>Thank you for your order!</span>
    <p>Check your orders.</p>
    <a href="orders">My orders</a>
}
else
{
     <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />

                    <input type="number" value="@product.Quantity"
                   @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                   class="form-control input-quantity"
                   min="1" />



                    <button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * @product.Quantity)
        </div>
    </div>

    @if (isAuthenticted)
    {
        <div>
            <h5>Delivery address</h5>
            <AddressForm/>
        </div>
    }


    <button @onclick="PlaceOrder" class="btn alert-success float-end mt-1"> 
        Place Order
    </button>
}

@code {
    List<CartProductResponseDTO> cartProducts = null;
    bool isAuthenticted = false;
    string message = "Loading cart....";
    bool orderCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
        isAuthenticted = await _authService.IsUserAuthenticated();
    }

    private async Task PlaceOrder()
    {
        await _orderService.PlaceOrder();
        await _cartService.GetCartCount();
        orderCompleted = true;

    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await _cartService.RemoveProductFromCart(productId, productTypeId);
        await  LoadCart();
    }


    private async Task LoadCart() {
        await _cartService.GetCartCount();
        cartProducts = await _cartService.GetCartProducts();

        if (cartProducts == null || cartProducts.Count == 0)
        {
            message = "Your cart is empty. Add something...";
            cartProducts = new List<CartProductResponseDTO>();
        }
        else
        {
            cartProducts = await _cartService.GetCartProducts();
        }
    }


    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponseDTO product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1) product.Quantity = 1;

        await _cartService.UpdateProductQuantity(product);

    }
}
