@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager

<div class="dropdown">
    <buton @onclick="ToggleUserMenu"
           class="btn btn-secondary dropdown-toggle user-button">
        <i class="oi oi-person"></i>
    </buton>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass" @onfocusout="HideUserMenu">

        <AuthorizeView>
            <Authorized>
                <a href="profile" class="dropdown-item">Profile</a>
                <button class="dropdown-item" @onclick="Logout">Logout</button>
            </Authorized>
            <NotAuthorized>
                <a href="register" class="dropdown-item">Register</a>
                <a href="login?returnUrl=@_navigationManager.ToBaseRelativePath(_navigationManager.Uri)" class="dropdown-item">Login</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool showUserMenu = false;

    private string UserMenuCssClass => showUserMenu ? "show-menu" : "";

    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    private async Task HideUserMenu()
    {
        await Task.Delay(500);
        showUserMenu = false;
    }

    private async Task Logout()
    {
        await _localStorage.RemoveItemAsync("authToken");
        await _authenticationStateProvider.GetAuthenticationStateAsync();
        _navigationManager.NavigateTo("");

    }

}
