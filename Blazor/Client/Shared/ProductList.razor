@inject IProductService ProductService
@implements IDisposable 


@if (ProductService.products == null || ProductService.products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{

    <ul class='list-unstyled'>
        @foreach (var product in ProductService.products)
        {
            <li class='media my-3'>
                <div class='media-img-wrapper mr-2'>
                    <a href='/product/@product.Id'>
                        <img class='img-fluid' src="@product.ImageUrl" alt="@product.Name" />

                    </a>
                </div>
                <div class='media-body'>
                    <a href='/product/@product.Id'>
                        <h4 class='mb-0'>  @product.Name</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class='price'>@getPriceText(@product)</h5>
                    @*<h5 class='price'>@product.Price KM</h5>*@
                </div>
            </li>
        }
    </ul>

    @for (var i = 1; i<=ProductService.PageCount; i++)
    {
        <a class="btn-link @(i == ProductService.CurrentPage?"btn-info":"btn-outline-info") page-selection"  
        href="/search/@ProductService.LastSearchText/@i">@i</a>
    }
}



@code {
    //https://localhost:7280/api/product

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;

    }


    private string getPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }else if (variants.Count == 1)
        {
            return variants[0].Price.ToString();
        }
        else
        {
            var minPrice = variants.Min(p => p.Price);
            return "Starting at " + minPrice;
        }
    }


    }

